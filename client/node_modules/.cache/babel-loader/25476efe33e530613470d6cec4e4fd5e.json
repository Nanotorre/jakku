{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    _again = false;\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        desc = parent = undefined;\n        continue _function;\n      }\n    } else if ('value' in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _DateInput = require('./DateInput');\n\nvar _DateInput2 = _interopRequireDefault(_DateInput);\n\nvar _Calendar = require('./Calendar');\n\nvar _Calendar2 = _interopRequireDefault(_Calendar);\n\nvar DatePicker = function (_Component) {\n  _inherits(DatePicker, _Component);\n\n  function DatePicker(props) {\n    _classCallCheck(this, DatePicker);\n\n    _get(Object.getPrototypeOf(DatePicker.prototype), 'constructor', this).call(this, props);\n\n    this.state = {\n      date: (0, _moment2['default'])(props.date),\n      isCalendarOpen: false\n    };\n  }\n\n  _createClass(DatePicker, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      document.addEventListener('mousedown', this.onClickOutside.bind(this));\n      document.addEventListener('touchstart', this.onClickOutside.bind(this));\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      document.removeEventListener('mousedown', this.onClickOutside.bind(this));\n      document.removeEventListener('touchstart', this.onClickOutside.bind(this));\n    }\n  }, {\n    key: 'onClickOutside',\n    value: function onClickOutside(e) {\n      var calendar = _reactDom2['default'].findDOMNode(this.refs.calendar);\n\n      var dateInput = _reactDom2['default'].findDOMNode(this.refs.dateInput);\n\n      if (!calendar) return;\n\n      if (!calendar.contains(e.target) && !dateInput.contains(e.target)) {\n        this.setState({\n          isCalendarOpen: false\n        });\n      }\n    }\n  }, {\n    key: 'toggleCalendar',\n    value: function toggleCalendar() {\n      this.setState({\n        isCalendarOpen: !this.state.isCalendarOpen\n      });\n    }\n  }, {\n    key: 'renderCalendar',\n    value: function renderCalendar() {\n      var _props = this.props;\n      var minDate = _props.minDate;\n      var maxDate = _props.maxDate;\n      var calendarClassName = _props.calendarClassName;\n      var dayClassName = _props.dayClassName;\n      var dayActiveClassName = _props.dayActiveClassName;\n      var dayDisabledClassName = _props.dayDisabledClassName;\n      var dayFromOtherMonthClassName = _props.dayFromOtherMonthClassName;\n      var monthClassName = _props.monthClassName;\n      var prevMonthClassName = _props.prevMonthClassName;\n      var nextMonthClassName = _props.nextMonthClassName;\n\n      if (!this.state.isCalendarOpen) {\n        return null;\n      }\n\n      return _react2['default'].createElement(_Calendar2['default'], {\n        ref: 'calendar',\n        date: this.state.date,\n        minDate: minDate,\n        maxDate: maxDate,\n        selectDay: this.selectDay.bind(this),\n        calendarClassName: calendarClassName,\n        dayClassName: dayClassName,\n        dayActiveClassName: dayActiveClassName,\n        dayDisabledClassName: dayDisabledClassName,\n        dayFromOtherMonthClassName: dayFromOtherMonthClassName,\n        monthClassName: monthClassName,\n        prevMonthClassName: prevMonthClassName,\n        nextMonthClassName: nextMonthClassName\n      });\n    }\n  }, {\n    key: 'selectDay',\n    value: function selectDay(date) {\n      var _props2 = this.props;\n      var clickOnDate = _props2.clickOnDate;\n      var name = _props2.name;\n\n      if (clickOnDate) {\n        this.setState({\n          isCalendarOpen: false\n        });\n        return clickOnDate(date, name);\n      }\n\n      this.setState({\n        isCalendarOpen: false,\n        date: date\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props;\n      var datepickerClassName = _props3.datepickerClassName;\n      var inputClassName = _props3.inputClassName;\n      return _react2['default'].createElement('div', {\n        className: datepickerClassName\n      }, _react2['default'].createElement(_DateInput2['default'], {\n        ref: 'dateInput',\n        inputValue: this.state.date,\n        inputOnClick: this.toggleCalendar.bind(this),\n        inputClassName: inputClassName\n      }), this.renderCalendar());\n    }\n  }]);\n\n  return DatePicker;\n}(_react.Component);\n\nexports['default'] = DatePicker;\nDatePicker.propTypes = {\n  date: _react.PropTypes.oneOfType([_react.PropTypes.instanceOf(_moment2['default']), _react.PropTypes.instanceOf(Date)]),\n  minDate: _react.PropTypes.oneOfType([_react.PropTypes.instanceOf(_moment2['default']), _react.PropTypes.instanceOf(Date)]),\n  maxDate: _react.PropTypes.oneOfType([_react.PropTypes.instanceOf(_moment2['default']), _react.PropTypes.instanceOf(Date)]),\n  clickOnDate: _react.PropTypes.func,\n  name: _react.PropTypes.string,\n  datepickerClassName: _react.PropTypes.string,\n  inputClassName: _react.PropTypes.string,\n  calendarClassName: _react.PropTypes.string,\n  monthClassName: _react.PropTypes.string,\n  prevMonthClassName: _react.PropTypes.string,\n  nextMonthClassName: _react.PropTypes.string,\n  dayClassName: _react.PropTypes.string,\n  dayActiveClassName: _react.PropTypes.string,\n  dayDisabledClassName: _react.PropTypes.string,\n  dayFromOtherMonthClassName: _react.PropTypes.string\n};\nDatePicker.defaultProps = {\n  date: new Date(),\n  datepickerClassName: 'datepicker'\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}