{"ast":null,"code":"import _defineProperty from \"/Users/fer/ironhack/week_8/jakku/client/gang/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/fer/ironhack/week_8/jakku/client/gang/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/fer/ironhack/week_8/jakku/client/gang/src/elements/CreateBidForm.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'date-fns';\nimport React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from '@material-ui/core/TextField';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\n\nconst GooglePlacesInput = () => {\n  return React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Search\",\n    minLength: 2 // minimum length of text to search\n    ,\n    autoFocus: false,\n    returnKeyType: 'search' // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\n    ,\n    listViewDisplayed: \"auto\" // true/false/undefined\n    ,\n    fetchDetails: true,\n    renderDescription: row => row.description // custom description render\n    ,\n    onPress: (data, details = null) => {\n      // 'details' is provided when fetchDetails = true\n      console.log(data, details);\n    },\n    getDefaultValue: () => '',\n    query: {\n      // available options: https://developers.google.com/places/web-service/autocomplete\n      key: 'YOUR API KEY',\n      language: 'en',\n      // language of the results\n      types: '(cities)' // default: 'geocode'\n\n    },\n    styles: {\n      textInputContainer: {\n        width: '100%'\n      },\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#1faadb'\n      }\n    },\n    currentLocation: true // Will add a 'Current location' button at the top of the predefined places list\n    ,\n    currentLocationLabel: \"Current location\",\n    nearbyPlacesAPI: \"GooglePlacesSearch\" // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\n    ,\n    GoogleReverseGeocodingQuery: {// available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro\n    },\n    GooglePlacesSearchQuery: {\n      // available options for GooglePlacesSearch API : https://developers.google.com/places/web-service/search\n      rankby: 'distance',\n      types: 'food'\n    },\n    filterReverseGeocodingByTypes: ['locality', 'administrative_area_level_3'] // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\n    ,\n    debounce: 200 // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\n    //renderLeftButton={()  => <Image source={require('path/custom/left-icon')} />}\n    //renderRightButton={() => <Text>Custom text after the input</Text>}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  });\n};\n\nexport default function MaterialUIPickers() {\n  // The first commit of Material-UI\n  const _React$useState = React.useState(new Date('2014-08-18T21:11:54')),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        selectedDate = _React$useState2[0],\n        setSelectedDate = _React$useState2[1];\n\n  const _React$useState3 = React.useState({\n    name: 'Cat in the Hat',\n    age: '',\n    multiline: 'Controlled',\n    currency: 'EUR',\n    date: new Date()\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        values = _React$useState4[0],\n        setValues = _React$useState4[1];\n\n  const handleChange = name => event => {\n    setValues(_objectSpread({}, values, {\n      [name]: event.target.value\n    }));\n  };\n\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  return React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(KeyboardDatePicker, {\n    disableToolbar: true,\n    variant: \"inline\",\n    format: \"MM/dd/yyyy\",\n    margin: \"normal\",\n    id: \"date-picker-inline\",\n    label: \"Fecha de finalizaci\\xF3n\",\n    value: selectedDate,\n    onChange: handleDateChange,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(KeyboardTimePicker, {\n    margin: \"normal\",\n    id: \"time-picker\",\n    label: \"Hora de recogida\",\n    value: selectedDate,\n    onChange: handleDateChange,\n    KeyboardButtonProps: {\n      'aria-label': 'change time'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(KeyboardTimePicker, {\n    margin: \"normal\",\n    id: \"time-picker\",\n    label: \"Hora l\\xEDmite de recogida\",\n    value: selectedDate,\n    onChange: handleDateChange,\n    KeyboardButtonProps: {\n      'aria-label': 'change time'\n    },\n    inputProps: {\n      step: 450\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-name\",\n    label: \"Direcci\\xF3n\",\n    value: values.name,\n    onChange: handleChange('name'),\n    margin: \"normal\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Search\",\n    minLength: 2 // minimum length of text to search\n    ,\n    autoFocus: false,\n    returnKeyType: 'search',\n    listViewDisplayed: \"false\",\n    fetchDetails: true,\n    renderDescription: row => row.description || row.formatted_address || row.name,\n    onPress: (data, details = null) => {},\n    getDefaultValue: () => {\n      return ''; // text input default value\n    },\n    query: {\n      key: 'this you need to generate dear',\n      language: 'en',\n      // language of the results\n      types: '(cities)' // default: 'geocode'\n\n    },\n    styles: {\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#1faadb'\n      }\n    },\n    enablePoweredByContainer: true,\n    nearbyPlacesAPI: \"GoogleReverseGeocoding\",\n    GooglePlacesSearchQuery: {\n      rankby: 'distance',\n      types: 'food'\n    },\n    filterReverseGeocodingByTypes: ['locality', 'administrative_area_level_3'],\n    debounce: 200,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/fer/ironhack/week_8/jakku/client/gang/src/elements/CreateBidForm.jsx"],"names":["React","DateFnsUtils","TextField","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","GooglePlacesAutocomplete","GooglePlacesInput","row","description","data","details","console","log","key","language","types","textInputContainer","width","fontWeight","predefinedPlacesDescription","color","rankby","MaterialUIPickers","useState","Date","selectedDate","setSelectedDate","name","age","multiline","currency","date","values","setValues","handleChange","event","target","value","handleDateChange","step","formatted_address"],"mappings":";;;;;;;;AAAA,OAAO,UAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SACEC,uBADF,EAEEC,kBAFF,EAGEC,kBAHF,QAIO,sBAJP;AAKA,SAASC,wBAAT,QAAyC,yCAAzC;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,SACE,oBAAC,wBAAD;AACE,IAAA,WAAW,EAAC,QADd;AAEE,IAAA,SAAS,EAAE,CAFb,CAEgB;AAFhB;AAGE,IAAA,SAAS,EAAE,KAHb;AAIE,IAAA,aAAa,EAAE,QAJjB,CAI2B;AAJ3B;AAKE,IAAA,iBAAiB,EAAC,MALpB,CAK8B;AAL9B;AAME,IAAA,YAAY,EAAE,IANhB;AAOE,IAAA,iBAAiB,EAAEC,GAAG,IAAIA,GAAG,CAACC,WAPhC,CAO6C;AAP7C;AAQE,IAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,OAAO,GAAG,IAAjB,KAA0B;AAAE;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBC,OAAlB;AACD,KAVH;AAYE,IAAA,eAAe,EAAE,MAAM,EAZzB;AAcE,IAAA,KAAK,EAAE;AACL;AACAG,MAAAA,GAAG,EAAE,cAFA;AAGLC,MAAAA,QAAQ,EAAE,IAHL;AAGW;AAChBC,MAAAA,KAAK,EAAE,UAJF,CAIa;;AAJb,KAdT;AAqBE,IAAA,MAAM,EAAE;AACNC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,KAAK,EAAE;AADW,OADd;AAINT,MAAAA,WAAW,EAAE;AACXU,QAAAA,UAAU,EAAE;AADD,OAJP;AAONC,MAAAA,2BAA2B,EAAE;AAC3BC,QAAAA,KAAK,EAAE;AADoB;AAPvB,KArBV;AAiCE,IAAA,eAAe,EAAE,IAjCnB,CAiCyB;AAjCzB;AAkCE,IAAA,oBAAoB,EAAC,kBAlCvB;AAmCE,IAAA,eAAe,EAAC,oBAnClB,CAmCuC;AAnCvC;AAoCE,IAAA,2BAA2B,EAAE,CAC3B;AAD2B,KApC/B;AAuCE,IAAA,uBAAuB,EAAE;AACvB;AACAC,MAAAA,MAAM,EAAE,UAFe;AAGvBN,MAAAA,KAAK,EAAE;AAHgB,KAvC3B;AA6CE,IAAA,6BAA6B,EAAE,CAAC,UAAD,EAAa,6BAAb,CA7CjC,CA6C8E;AA7C9E;AAgDE,IAAA,QAAQ,EAAE,GAhDZ,CAgDiB;AACf;AACA;AAlDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsDD,CAvDD;;AAyDA,eAAe,SAASO,iBAAT,GAA6B;AAC1C;AAD0C,0BAEFvB,KAAK,CAACwB,QAAN,CAAe,IAAIC,IAAJ,CAAS,qBAAT,CAAf,CAFE;AAAA;AAAA,QAEnCC,YAFmC;AAAA,QAErBC,eAFqB;;AAAA,2BAGd3B,KAAK,CAACwB,QAAN,CAAe;AACzCI,IAAAA,IAAI,EAAE,gBADmC;AAEzCC,IAAAA,GAAG,EAAE,EAFoC;AAGzCC,IAAAA,SAAS,EAAE,YAH8B;AAIzCC,IAAAA,QAAQ,EAAE,KAJ+B;AAKzCC,IAAAA,IAAI,EAAE,IAAIP,IAAJ;AALmC,GAAf,CAHc;AAAA;AAAA,QAGnCQ,MAHmC;AAAA,QAG3BC,SAH2B;;AAW1C,QAAMC,YAAY,GAAGP,IAAI,IAAIQ,KAAK,IAAI;AACpCF,IAAAA,SAAS,mBAAMD,MAAN;AAAc,OAACL,IAAD,GAAQQ,KAAK,CAACC,MAAN,CAAaC;AAAnC,OAAT;AACD,GAFD;;AAGA,QAAMC,gBAAgB,GAAGP,IAAI,IAAI;AAC/BL,IAAAA,eAAe,CAACK,IAAD,CAAf;AACD,GAFD;;AAIA,SACE,oBAAC,uBAAD;AAAyB,IAAA,KAAK,EAAE/B,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,kBAAD;AACE,IAAA,cAAc,MADhB;AAEE,IAAA,OAAO,EAAC,QAFV;AAGE,IAAA,MAAM,EAAC,YAHT;AAIE,IAAA,MAAM,EAAC,QAJT;AAKE,IAAA,EAAE,EAAC,oBALL;AAME,IAAA,KAAK,EAAC,0BANR;AAOE,IAAA,KAAK,EAAEyB,YAPT;AAQE,IAAA,QAAQ,EAAEa,gBARZ;AASE,IAAA,mBAAmB,EAAE;AACnB,oBAAc;AADK,KATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAeI,oBAAC,kBAAD;AACE,IAAA,MAAM,EAAC,QADT;AAEE,IAAA,EAAE,EAAC,aAFL;AAGE,IAAA,KAAK,EAAC,kBAHR;AAIE,IAAA,KAAK,EAAEb,YAJT;AAKE,IAAA,QAAQ,EAAEa,gBALZ;AAME,IAAA,mBAAmB,EAAE;AACnB,oBAAc;AADK,KANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAyBI,oBAAC,kBAAD;AACE,IAAA,MAAM,EAAC,QADT;AAEE,IAAA,EAAE,EAAC,aAFL;AAGE,IAAA,KAAK,EAAC,4BAHR;AAIE,IAAA,KAAK,EAAEb,YAJT;AAKE,IAAA,QAAQ,EAAEa,gBALZ;AAME,IAAA,mBAAmB,EAAE;AACnB,oBAAc;AADK,KANvB;AASE,IAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE;AADI,KATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBJ,EAsCK,oBAAC,SAAD;AACD,IAAA,EAAE,EAAC,eADF;AAED,IAAA,KAAK,EAAC,cAFL;AAGD,IAAA,KAAK,EAAEP,MAAM,CAACL,IAHb;AAID,IAAA,QAAQ,EAAEO,YAAY,CAAC,MAAD,CAJrB;AAKD,IAAA,MAAM,EAAC,QALN;AAMD,IAAA,OAAO,EAAC,UANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtCL,EA8CE,oBAAC,wBAAD;AACG,IAAA,WAAW,EAAC,QADf;AAEG,IAAA,SAAS,EAAE,CAFd,CAEiB;AAFjB;AAGG,IAAA,SAAS,EAAE,KAHd;AAIG,IAAA,aAAa,EAAE,QAJlB;AAKG,IAAA,iBAAiB,EAAC,OALrB;AAMG,IAAA,YAAY,EAAE,IANjB;AAOG,IAAA,iBAAiB,EAAE3B,GAAG,IAAIA,GAAG,CAACC,WAAJ,IAAqBD,GAAG,CAACiC,iBAAzB,IAA8CjC,GAAG,CAACoB,IAP/E;AAQN,IAAA,OAAO,EAAE,CAAClB,IAAD,EAAOC,OAAO,GAAG,IAAjB,KAA0B,CAClC,CATK;AAUG,IAAA,eAAe,EAAE,MAAM;AACrB,aAAO,EAAP,CADqB,CACV;AACZ,KAZJ;AAaG,IAAA,KAAK,EAAE;AAELG,MAAAA,GAAG,EAAE,gCAFA;AAGLC,MAAAA,QAAQ,EAAE,IAHL;AAGW;AAChBC,MAAAA,KAAK,EAAE,UAJF,CAIc;;AAJd,KAbV;AAmBG,IAAA,MAAM,EAAE;AACNP,MAAAA,WAAW,EAAE;AACXU,QAAAA,UAAU,EAAE;AADD,OADP;AAINC,MAAAA,2BAA2B,EAAE;AAC3BC,QAAAA,KAAK,EAAE;AADoB;AAJvB,KAnBX;AA2BG,IAAA,wBAAwB,EAAE,IA3B7B;AA6BG,IAAA,eAAe,EAAC,wBA7BnB;AA+BG,IAAA,uBAAuB,EAAE;AAEvBC,MAAAA,MAAM,EAAE,UAFe;AAGvBN,MAAAA,KAAK,EAAE;AAHgB,KA/B5B;AAoCG,IAAA,6BAA6B,EAAE,CAC7B,UAD6B,EAE7B,6BAF6B,CApClC;AAyCG,IAAA,QAAQ,EAAE,GAzCb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9CF,CADF;AA6FD","sourcesContent":["import 'date-fns';\nimport React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport TextField from '@material-ui/core/TextField';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\n\nconst GooglePlacesInput = () => {\n  return (\n    <GooglePlacesAutocomplete\n      placeholder='Search'\n      minLength={2} // minimum length of text to search\n      autoFocus={false}\n      returnKeyType={'search'} // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\n      listViewDisplayed='auto'    // true/false/undefined\n      fetchDetails={true}\n      renderDescription={row => row.description} // custom description render\n      onPress={(data, details = null) => { // 'details' is provided when fetchDetails = true\n        console.log(data, details);\n      }}\n      \n      getDefaultValue={() => ''}\n      \n      query={{\n        // available options: https://developers.google.com/places/web-service/autocomplete\n        key: 'YOUR API KEY',\n        language: 'en', // language of the results\n        types: '(cities)' // default: 'geocode'\n      }}\n      \n      styles={{\n        textInputContainer: {\n          width: '100%'\n        },\n        description: {\n          fontWeight: 'bold'\n        },\n        predefinedPlacesDescription: {\n          color: '#1faadb'\n        }\n      }}\n      \n      currentLocation={true} // Will add a 'Current location' button at the top of the predefined places list\n      currentLocationLabel=\"Current location\"\n      nearbyPlacesAPI='GooglePlacesSearch' // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\n      GoogleReverseGeocodingQuery={{\n        // available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro\n      }}\n      GooglePlacesSearchQuery={{\n        // available options for GooglePlacesSearch API : https://developers.google.com/places/web-service/search\n        rankby: 'distance',\n        types: 'food'\n      }}\n \n      filterReverseGeocodingByTypes={['locality', 'administrative_area_level_3']} // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\n    \n \n      debounce={200} // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\n      //renderLeftButton={()  => <Image source={require('path/custom/left-icon')} />}\n      //renderRightButton={() => <Text>Custom text after the input</Text>}\n    />\n  );\n}\n\nexport default function MaterialUIPickers() {\n  // The first commit of Material-UI\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\n  const [values, setValues] = React.useState({\n    name: 'Cat in the Hat',\n    age: '',\n    multiline: 'Controlled',\n    currency: 'EUR',\n    date: new Date()\n  });\n\n  const handleChange = name => event => {\n    setValues({ ...values, [name]: event.target.value });\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"Fecha de finalización\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        <KeyboardTimePicker\n          margin=\"normal\"\n          id=\"time-picker\"\n          label=\"Hora de recogida\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change time',\n          }}\n        />\n        <KeyboardTimePicker\n          margin=\"normal\"\n          id=\"time-picker\"\n          label=\"Hora límite de recogida\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change time',\n          }}\n          inputProps={{\n            step: 450, \n          }}\n        />\n         <TextField\n        id=\"outlined-name\"\n        label=\"Dirección\"\n        value={values.name}\n        onChange={handleChange('name')}\n        margin=\"normal\"\n        variant=\"outlined\"\n      />\n      <GooglePlacesAutocomplete\n         placeholder=\"Search\"\n         minLength={2} // minimum length of text to search\n         autoFocus={false}\n         returnKeyType={'search'} \n         listViewDisplayed=\"false\" \n         fetchDetails={true}\n         renderDescription={row => row.description ||   row.formatted_address || row.name}\nonPress={(data, details = null) => {\n}}\n         getDefaultValue={() => {\n           return ''; // text input default value\n         }}\n         query={{\n          \n           key: 'this you need to generate dear',\n           language: 'en', // language of the results\n           types: '(cities)', // default: 'geocode'\n         }}\n         styles={{\n           description: {\n             fontWeight: 'bold',\n           },\n           predefinedPlacesDescription: {\n             color: '#1faadb',\n           },\n         }}\n         enablePoweredByContainer={true}\n         \n         nearbyPlacesAPI=\"GoogleReverseGeocoding\" \n        \n         GooglePlacesSearchQuery={{\n          \n           rankby: 'distance',\n           types: 'food',\n         }}\n         filterReverseGeocodingByTypes={[\n           'locality',\n           'administrative_area_level_3',\n         ]} \n         \n         debounce={200}\n       />\n   \n    </MuiPickersUtilsProvider>\n  );\n}"]},"metadata":{},"sourceType":"module"}