{"ast":null,"code":"import axios from \"axios\";\n\nclass RoutesService {\n  constructor() {\n    this.errHandler = err => {\n      // console.error(err);\n      if (err.response && err.response.data) {\n        // console.error(\"API response\", err.response.data);\n        throw err.response.data.message;\n      }\n\n      throw err;\n    };\n\n    this.createBid = state => {\n      return this.service.post(\"/create/new-bid\", {\n        state\n      }).then(response => response.data).catch(this.errHandler);\n    };\n\n    this.createProduct = state => {\n      return this.service.post(\"/create/new-product\", {\n        state\n      }).then(response => response.data).catch(this.errHandler);\n    };\n\n    this.addPicture = file => {\n      const formData = new FormData();\n      formData.append(\"photo\", file);\n      return this.service.post('/create/new-product/photo', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(res => res.data).catch(this.errHandler);\n    };\n\n    this.getProduct = id => {\n      return this.service.get(\"display/product-info/\".concat(id)).then(response => response.data).catch(this.errHandler);\n    };\n\n    this.buyProduct = id => {\n      return this.service.put(\"/edit/buy-product/\".concat(id)).then(response => response.data).catch(this.errHandler);\n    };\n\n    this.getProducts = () => {\n      return this.service.get(\"display/all-products\").then(response => response.data).catch(this.errHandler);\n    };\n\n    this.start = () => {\n      return this.service.get(\"display/start\").then(response => response.data).catch(this.errHandler);\n    };\n\n    this.getBids = () => {\n      return this.service.get(\"display/all-bids\").then(response => response.data).catch(this.errHandler);\n    };\n\n    this.service = axios.create({\n      baseURL: \"http://localhost:3010/\",\n      withCredentials: true\n    });\n  }\n\n}\n\nexport default RoutesService;","map":{"version":3,"sources":["/Users/fer/ironhack/week_8/jakku/client/src/RoutesService.js"],"names":["axios","RoutesService","constructor","errHandler","err","response","data","message","createBid","state","service","post","then","catch","createProduct","addPicture","file","formData","FormData","append","headers","res","getProduct","id","get","buyProduct","put","getProducts","start","getBids","create","baseURL","withCredentials"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,GAAG;AAAA,SAMdC,UANc,GAMDC,GAAG,IAAI;AAClB;AACA,UAAIA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAAjC,EAAuC;AACrC;AACA,cAAMF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC,OAAxB;AACD;;AACD,YAAMH,GAAN;AACD,KAba;;AAAA,SAedI,SAfc,GAeDC,KAAD,IAAW;AACrB,aAAO,KAAKC,OAAL,CAAaC,IAAb,CAAkB,iBAAlB,EAAqC;AAACF,QAAAA;AAAD,OAArC,EACNG,IADM,CACDP,QAAQ,IAAIA,QAAQ,CAACC,IADpB,EAENO,KAFM,CAEA,KAAKV,UAFL,CAAP;AAID,KApBa;;AAAA,SAqBdW,aArBc,GAqBGL,KAAD,IAAW;AACzB,aAAO,KAAKC,OAAL,CAAaC,IAAb,CAAkB,qBAAlB,EAAyC;AAACF,QAAAA;AAAD,OAAzC,EACNG,IADM,CACDP,QAAQ,IAAIA,QAAQ,CAACC,IADpB,EAENO,KAFM,CAEA,KAAKV,UAFL,CAAP;AAGD,KAzBa;;AAAA,SA0BdY,UA1Bc,GA0BAC,IAAD,IAAU;AACrB,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,IAAzB;AACA,aAAO,KAAKN,OAAL,CACJC,IADI,CACC,2BADD,EAC8BM,QAD9B,EACwC;AAC3CG,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADkC,OADxC,EAMJR,IANI,CAMCS,GAAG,IAAIA,GAAG,CAACf,IANZ,EAOJO,KAPI,CAOE,KAAKV,UAPP,CAAP;AAQD,KArCa;;AAAA,SAsCdmB,UAtCc,GAsCAC,EAAD,IAAQ;AACnB,aAAO,KAAKb,OAAL,CAAac,GAAb,gCAAyCD,EAAzC,GACNX,IADM,CACDP,QAAQ,IACbA,QAAQ,CAACC,IAFH,EAGNO,KAHM,CAGA,KAAKV,UAHL,CAAP;AAID,KA3Ca;;AAAA,SA4CdsB,UA5Cc,GA4CAF,EAAD,IAAQ;AACnB,aAAO,KAAKb,OAAL,CAAagB,GAAb,6BAAsCH,EAAtC,GACNX,IADM,CACDP,QAAQ,IACZA,QAAQ,CAACC,IAFJ,EAGNO,KAHM,CAGA,KAAKV,UAHL,CAAP;AAID,KAjDa;;AAAA,SAkDdwB,WAlDc,GAkDD,MAAM;AACjB,aAAO,KAAKjB,OAAL,CAAac,GAAb,CAAiB,sBAAjB,EACNZ,IADM,CACDP,QAAQ,IAAGA,QAAQ,CAACC,IADnB,EAENO,KAFM,CAEA,KAAKV,UAFL,CAAP;AAGD,KAtDa;;AAAA,SAuDdyB,KAvDc,GAuDP,MAAM;AACX,aAAO,KAAKlB,OAAL,CAAac,GAAb,CAAiB,eAAjB,EACNZ,IADM,CACDP,QAAQ,IAAGA,QAAQ,CAACC,IADnB,EAENO,KAFM,CAEA,KAAKV,UAFL,CAAP;AAGD,KA3Da;;AAAA,SA4Dd0B,OA5Dc,GA4DL,MAAM;AACb,aAAO,KAAKnB,OAAL,CAAac,GAAb,CAAiB,kBAAjB,EACNZ,IADM,CACDP,QAAQ,IAAGA,QAAQ,CAACC,IADnB,EAENO,KAFM,CAEA,KAAKV,UAFL,CAAP;AAGD,KAhEa;;AACZ,SAAKO,OAAL,GAAeV,KAAK,CAAC8B,MAAN,CAAa;AAC1BC,MAAAA,OAAO,EAAE,wBADiB;AAE1BC,MAAAA,eAAe,EAAE;AAFS,KAAb,CAAf;AAID;;AANiB;;AAwEpB,eAAe/B,aAAf","sourcesContent":["import axios from \"axios\";\n\nclass RoutesService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: \"http://localhost:3010/\",\n      withCredentials: true\n    })\n  }\n  errHandler = err => {\n    // console.error(err);\n    if (err.response && err.response.data) {\n      // console.error(\"API response\", err.response.data);\n      throw err.response.data.message\n    }\n    throw err;\n  }\n\n  createBid = (state) => {\n    return this.service.post(\"/create/new-bid\", {state})\n    .then(response => response.data)\n    .catch(this.errHandler)\n  \n  }\n  createProduct = (state) => {\n    return this.service.post(\"/create/new-product\", {state})\n    .then(response => response.data)\n    .catch(this.errHandler)\n  }\n  addPicture = (file) => {\n    const formData = new FormData();\n    formData.append(\"photo\", file)\n    return this.service\n      .post('/create/new-product/photo', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then(res => res.data)\n      .catch(this.errHandler);\n  }\n  getProduct = (id) => {\n    return this.service.get(`display/product-info/${id}`)\n    .then(response=> \n     response.data)\n    .catch(this.errHandler)\n  }\n  buyProduct = (id) => {\n    return this.service.put(`/edit/buy-product/${id}`)\n    .then(response=>\n      response.data)\n    .catch(this.errHandler)\n  }\n  getProducts= () => {\n    return this.service.get(\"display/all-products\")\n    .then(response=> response.data)\n    .catch(this.errHandler)\n  }\n  start= () => {\n    return this.service.get(\"display/start\")\n    .then(response=> response.data)\n    .catch(this.errHandler)\n  }\n  getBids= () => {\n    return this.service.get(\"display/all-bids\")\n    .then(response=> response.data)\n    .catch(this.errHandler)\n  }\n  \n\n\n\n}\n\nexport default RoutesService;"]},"metadata":{},"sourceType":"module"}